--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 10.1SP1 cbx_cycloneii 2011:01:19:21:13:40:SJ cbx_lpm_add_sub 2011:01:19:21:13:40:SJ cbx_lpm_compare 2011:01:19:21:13:40:SJ cbx_lpm_decode 2011:01:19:21:13:40:SJ cbx_mgl 2011:01:19:21:15:40:SJ cbx_stratix 2011:01:19:21:13:40:SJ cbx_stratixii 2011:01:19:21:13:40:SJ  VERSION_END


-- Copyright (C) 1991-2011 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_ppa
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode721w[1..0]	: WIRE;
	w_anode730w[3..0]	: WIRE;
	w_anode747w[3..0]	: WIRE;
	w_anode757w[3..0]	: WIRE;
	w_anode767w[3..0]	: WIRE;
	w_anode777w[3..0]	: WIRE;
	w_anode787w[3..0]	: WIRE;
	w_anode797w[3..0]	: WIRE;
	w_anode807w[3..0]	: WIRE;
	w_anode819w[1..0]	: WIRE;
	w_anode826w[3..0]	: WIRE;
	w_anode837w[3..0]	: WIRE;
	w_anode847w[3..0]	: WIRE;
	w_anode857w[3..0]	: WIRE;
	w_anode867w[3..0]	: WIRE;
	w_anode877w[3..0]	: WIRE;
	w_anode887w[3..0]	: WIRE;
	w_anode897w[3..0]	: WIRE;
	w_data719w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode897w[3..3], w_anode887w[3..3], w_anode877w[3..3], w_anode867w[3..3], w_anode857w[3..3], w_anode847w[3..3], w_anode837w[3..3], w_anode826w[3..3]), ( w_anode807w[3..3], w_anode797w[3..3], w_anode787w[3..3], w_anode777w[3..3], w_anode767w[3..3], w_anode757w[3..3], w_anode747w[3..3], w_anode730w[3..3]));
	w_anode721w[] = ( (w_anode721w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode730w[] = ( (w_anode730w[2..2] & (! w_data719w[2..2])), (w_anode730w[1..1] & (! w_data719w[1..1])), (w_anode730w[0..0] & (! w_data719w[0..0])), w_anode721w[1..1]);
	w_anode747w[] = ( (w_anode747w[2..2] & (! w_data719w[2..2])), (w_anode747w[1..1] & (! w_data719w[1..1])), (w_anode747w[0..0] & w_data719w[0..0]), w_anode721w[1..1]);
	w_anode757w[] = ( (w_anode757w[2..2] & (! w_data719w[2..2])), (w_anode757w[1..1] & w_data719w[1..1]), (w_anode757w[0..0] & (! w_data719w[0..0])), w_anode721w[1..1]);
	w_anode767w[] = ( (w_anode767w[2..2] & (! w_data719w[2..2])), (w_anode767w[1..1] & w_data719w[1..1]), (w_anode767w[0..0] & w_data719w[0..0]), w_anode721w[1..1]);
	w_anode777w[] = ( (w_anode777w[2..2] & w_data719w[2..2]), (w_anode777w[1..1] & (! w_data719w[1..1])), (w_anode777w[0..0] & (! w_data719w[0..0])), w_anode721w[1..1]);
	w_anode787w[] = ( (w_anode787w[2..2] & w_data719w[2..2]), (w_anode787w[1..1] & (! w_data719w[1..1])), (w_anode787w[0..0] & w_data719w[0..0]), w_anode721w[1..1]);
	w_anode797w[] = ( (w_anode797w[2..2] & w_data719w[2..2]), (w_anode797w[1..1] & w_data719w[1..1]), (w_anode797w[0..0] & (! w_data719w[0..0])), w_anode721w[1..1]);
	w_anode807w[] = ( (w_anode807w[2..2] & w_data719w[2..2]), (w_anode807w[1..1] & w_data719w[1..1]), (w_anode807w[0..0] & w_data719w[0..0]), w_anode721w[1..1]);
	w_anode819w[] = ( (w_anode819w[0..0] & data_wire[3..3]), enable_wire);
	w_anode826w[] = ( (w_anode826w[2..2] & (! w_data719w[2..2])), (w_anode826w[1..1] & (! w_data719w[1..1])), (w_anode826w[0..0] & (! w_data719w[0..0])), w_anode819w[1..1]);
	w_anode837w[] = ( (w_anode837w[2..2] & (! w_data719w[2..2])), (w_anode837w[1..1] & (! w_data719w[1..1])), (w_anode837w[0..0] & w_data719w[0..0]), w_anode819w[1..1]);
	w_anode847w[] = ( (w_anode847w[2..2] & (! w_data719w[2..2])), (w_anode847w[1..1] & w_data719w[1..1]), (w_anode847w[0..0] & (! w_data719w[0..0])), w_anode819w[1..1]);
	w_anode857w[] = ( (w_anode857w[2..2] & (! w_data719w[2..2])), (w_anode857w[1..1] & w_data719w[1..1]), (w_anode857w[0..0] & w_data719w[0..0]), w_anode819w[1..1]);
	w_anode867w[] = ( (w_anode867w[2..2] & w_data719w[2..2]), (w_anode867w[1..1] & (! w_data719w[1..1])), (w_anode867w[0..0] & (! w_data719w[0..0])), w_anode819w[1..1]);
	w_anode877w[] = ( (w_anode877w[2..2] & w_data719w[2..2]), (w_anode877w[1..1] & (! w_data719w[1..1])), (w_anode877w[0..0] & w_data719w[0..0]), w_anode819w[1..1]);
	w_anode887w[] = ( (w_anode887w[2..2] & w_data719w[2..2]), (w_anode887w[1..1] & w_data719w[1..1]), (w_anode887w[0..0] & (! w_data719w[0..0])), w_anode819w[1..1]);
	w_anode897w[] = ( (w_anode897w[2..2] & w_data719w[2..2]), (w_anode897w[1..1] & w_data719w[1..1]), (w_anode897w[0..0] & w_data719w[0..0]), w_anode819w[1..1]);
	w_data719w[2..0] = data_wire[2..0];
END;
--VALID FILE
